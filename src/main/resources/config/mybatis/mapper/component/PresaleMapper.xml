<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.runhang.sell.mapper.PresaleMapper" >
  <resultMap id="BaseResultMap" type="com.runhang.sell.model.Presale" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="presale_order_number" property="presaleOrderNumber" jdbcType="VARCHAR" />
    <result column="pay_order_code" property="payOrderCode" jdbcType="VARCHAR" />
    <result column="open_id" property="openId" jdbcType="VARCHAR" />
    <result column="order_id" property="orderId" jdbcType="INTEGER" />
    <result column="account_id" property="accountId" jdbcType="INTEGER" />
    <result column="vd_id" property="vdId" jdbcType="INTEGER" />
    <result column="goods_id" property="goodsId" jdbcType="INTEGER" />
    <result column="goods_number" property="goodsNumber" jdbcType="INTEGER" />
    <result column="picked_up_number" property="pickedUpNumber" jdbcType="INTEGER" />
    <result column="total_price" property="totalPrice" jdbcType="BIGINT" />
    <result column="pay_money" property="payMoney" jdbcType="BIGINT" />
    <result column="discount_money" property="discountMoney" jdbcType="BIGINT" />
    <result column="refund_money" property="refundMoney" jdbcType="BIGINT" />
    <result column="pick_up_code" property="pickUpCode" jdbcType="VARCHAR" />
    <result column="pay_status" property="payStatus" jdbcType="INTEGER" />
    <result column="pick_up_status" property="pickUpStatus" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="deleted" property="deleted" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, presale_order_number, pay_order_code, open_id, order_id, account_id, vd_id, goods_id, 
    goods_number, picked_up_number, total_price, pay_money, discount_money, refund_money, 
    pick_up_code, pay_status, pick_up_status, create_time, update_time, deleted
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.runhang.sell.model.PresaleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from am_presale
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from am_presale
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from am_presale
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.runhang.sell.model.PresaleExample" >
    delete from am_presale
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.runhang.sell.model.Presale" useGeneratedKeys="true" keyProperty="id" >
    insert into am_presale (presale_order_number, pay_order_code, 
      open_id, order_id, account_id, 
      vd_id, goods_id, goods_number, 
      picked_up_number, total_price, pay_money, 
      discount_money, refund_money, pick_up_code, 
      pay_status, pick_up_status, create_time, 
      update_time, deleted)
    values (#{presaleOrderNumber,jdbcType=VARCHAR}, #{payOrderCode,jdbcType=VARCHAR}, 
      #{openId,jdbcType=VARCHAR}, #{orderId,jdbcType=INTEGER}, #{accountId,jdbcType=INTEGER}, 
      #{vdId,jdbcType=INTEGER}, #{goodsId,jdbcType=INTEGER}, #{goodsNumber,jdbcType=INTEGER}, 
      #{pickedUpNumber,jdbcType=INTEGER}, #{totalPrice,jdbcType=BIGINT}, #{payMoney,jdbcType=BIGINT}, 
      #{discountMoney,jdbcType=BIGINT}, #{refundMoney,jdbcType=BIGINT}, #{pickUpCode,jdbcType=VARCHAR}, 
      #{payStatus,jdbcType=INTEGER}, #{pickUpStatus,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{deleted,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.runhang.sell.model.Presale" useGeneratedKeys="true" keyProperty="id" >
    insert into am_presale
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="presaleOrderNumber != null" >
        presale_order_number,
      </if>
      <if test="payOrderCode != null" >
        pay_order_code,
      </if>
      <if test="openId != null" >
        open_id,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="accountId != null" >
        account_id,
      </if>
      <if test="vdId != null" >
        vd_id,
      </if>
      <if test="goodsId != null" >
        goods_id,
      </if>
      <if test="goodsNumber != null" >
        goods_number,
      </if>
      <if test="pickedUpNumber != null" >
        picked_up_number,
      </if>
      <if test="totalPrice != null" >
        total_price,
      </if>
      <if test="payMoney != null" >
        pay_money,
      </if>
      <if test="discountMoney != null" >
        discount_money,
      </if>
      <if test="refundMoney != null" >
        refund_money,
      </if>
      <if test="pickUpCode != null" >
        pick_up_code,
      </if>
      <if test="payStatus != null" >
        pay_status,
      </if>
      <if test="pickUpStatus != null" >
        pick_up_status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="deleted != null" >
        deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="presaleOrderNumber != null" >
        #{presaleOrderNumber,jdbcType=VARCHAR},
      </if>
      <if test="payOrderCode != null" >
        #{payOrderCode,jdbcType=VARCHAR},
      </if>
      <if test="openId != null" >
        #{openId,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="accountId != null" >
        #{accountId,jdbcType=INTEGER},
      </if>
      <if test="vdId != null" >
        #{vdId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null" >
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="goodsNumber != null" >
        #{goodsNumber,jdbcType=INTEGER},
      </if>
      <if test="pickedUpNumber != null" >
        #{pickedUpNumber,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null" >
        #{totalPrice,jdbcType=BIGINT},
      </if>
      <if test="payMoney != null" >
        #{payMoney,jdbcType=BIGINT},
      </if>
      <if test="discountMoney != null" >
        #{discountMoney,jdbcType=BIGINT},
      </if>
      <if test="refundMoney != null" >
        #{refundMoney,jdbcType=BIGINT},
      </if>
      <if test="pickUpCode != null" >
        #{pickUpCode,jdbcType=VARCHAR},
      </if>
      <if test="payStatus != null" >
        #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="pickUpStatus != null" >
        #{pickUpStatus,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null" >
        #{deleted,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.runhang.sell.model.PresaleExample" resultType="java.lang.Integer" >
    select count(*) from am_presale
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update am_presale
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.presaleOrderNumber != null" >
        presale_order_number = #{record.presaleOrderNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.payOrderCode != null" >
        pay_order_code = #{record.payOrderCode,jdbcType=VARCHAR},
      </if>
      <if test="record.openId != null" >
        open_id = #{record.openId,jdbcType=VARCHAR},
      </if>
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.accountId != null" >
        account_id = #{record.accountId,jdbcType=INTEGER},
      </if>
      <if test="record.vdId != null" >
        vd_id = #{record.vdId,jdbcType=INTEGER},
      </if>
      <if test="record.goodsId != null" >
        goods_id = #{record.goodsId,jdbcType=INTEGER},
      </if>
      <if test="record.goodsNumber != null" >
        goods_number = #{record.goodsNumber,jdbcType=INTEGER},
      </if>
      <if test="record.pickedUpNumber != null" >
        picked_up_number = #{record.pickedUpNumber,jdbcType=INTEGER},
      </if>
      <if test="record.totalPrice != null" >
        total_price = #{record.totalPrice,jdbcType=BIGINT},
      </if>
      <if test="record.payMoney != null" >
        pay_money = #{record.payMoney,jdbcType=BIGINT},
      </if>
      <if test="record.discountMoney != null" >
        discount_money = #{record.discountMoney,jdbcType=BIGINT},
      </if>
      <if test="record.refundMoney != null" >
        refund_money = #{record.refundMoney,jdbcType=BIGINT},
      </if>
      <if test="record.pickUpCode != null" >
        pick_up_code = #{record.pickUpCode,jdbcType=VARCHAR},
      </if>
      <if test="record.payStatus != null" >
        pay_status = #{record.payStatus,jdbcType=INTEGER},
      </if>
      <if test="record.pickUpStatus != null" >
        pick_up_status = #{record.pickUpStatus,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleted != null" >
        deleted = #{record.deleted,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update am_presale
    set id = #{record.id,jdbcType=INTEGER},
      presale_order_number = #{record.presaleOrderNumber,jdbcType=VARCHAR},
      pay_order_code = #{record.payOrderCode,jdbcType=VARCHAR},
      open_id = #{record.openId,jdbcType=VARCHAR},
      order_id = #{record.orderId,jdbcType=INTEGER},
      account_id = #{record.accountId,jdbcType=INTEGER},
      vd_id = #{record.vdId,jdbcType=INTEGER},
      goods_id = #{record.goodsId,jdbcType=INTEGER},
      goods_number = #{record.goodsNumber,jdbcType=INTEGER},
      picked_up_number = #{record.pickedUpNumber,jdbcType=INTEGER},
      total_price = #{record.totalPrice,jdbcType=BIGINT},
      pay_money = #{record.payMoney,jdbcType=BIGINT},
      discount_money = #{record.discountMoney,jdbcType=BIGINT},
      refund_money = #{record.refundMoney,jdbcType=BIGINT},
      pick_up_code = #{record.pickUpCode,jdbcType=VARCHAR},
      pay_status = #{record.payStatus,jdbcType=INTEGER},
      pick_up_status = #{record.pickUpStatus,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.runhang.sell.model.Presale" >
    update am_presale
    <set >
      <if test="presaleOrderNumber != null" >
        presale_order_number = #{presaleOrderNumber,jdbcType=VARCHAR},
      </if>
      <if test="payOrderCode != null" >
        pay_order_code = #{payOrderCode,jdbcType=VARCHAR},
      </if>
      <if test="openId != null" >
        open_id = #{openId,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="accountId != null" >
        account_id = #{accountId,jdbcType=INTEGER},
      </if>
      <if test="vdId != null" >
        vd_id = #{vdId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null" >
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="goodsNumber != null" >
        goods_number = #{goodsNumber,jdbcType=INTEGER},
      </if>
      <if test="pickedUpNumber != null" >
        picked_up_number = #{pickedUpNumber,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null" >
        total_price = #{totalPrice,jdbcType=BIGINT},
      </if>
      <if test="payMoney != null" >
        pay_money = #{payMoney,jdbcType=BIGINT},
      </if>
      <if test="discountMoney != null" >
        discount_money = #{discountMoney,jdbcType=BIGINT},
      </if>
      <if test="refundMoney != null" >
        refund_money = #{refundMoney,jdbcType=BIGINT},
      </if>
      <if test="pickUpCode != null" >
        pick_up_code = #{pickUpCode,jdbcType=VARCHAR},
      </if>
      <if test="payStatus != null" >
        pay_status = #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="pickUpStatus != null" >
        pick_up_status = #{pickUpStatus,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null" >
        deleted = #{deleted,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.runhang.sell.model.Presale" >
    update am_presale
    set presale_order_number = #{presaleOrderNumber,jdbcType=VARCHAR},
      pay_order_code = #{payOrderCode,jdbcType=VARCHAR},
      open_id = #{openId,jdbcType=VARCHAR},
      order_id = #{orderId,jdbcType=INTEGER},
      account_id = #{accountId,jdbcType=INTEGER},
      vd_id = #{vdId,jdbcType=INTEGER},
      goods_id = #{goodsId,jdbcType=INTEGER},
      goods_number = #{goodsNumber,jdbcType=INTEGER},
      picked_up_number = #{pickedUpNumber,jdbcType=INTEGER},
      total_price = #{totalPrice,jdbcType=BIGINT},
      pay_money = #{payMoney,jdbcType=BIGINT},
      discount_money = #{discountMoney,jdbcType=BIGINT},
      refund_money = #{refundMoney,jdbcType=BIGINT},
      pick_up_code = #{pickUpCode,jdbcType=VARCHAR},
      pay_status = #{payStatus,jdbcType=INTEGER},
      pick_up_status = #{pickUpStatus,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getOrderIdsByCode" parameterType="java.lang.String" resultType="java.lang.Integer">
    SELECT order_id FROM am_presale where deleted = 0 and presale_order_number = #{presaleOrderNumber}
    GROUP BY order_id
  </select>
  <select id="getPresale" resultType="map">
    SELECT presale_order_number as orderNumber,total_price as totalOrderPrice,create_time as orderTime,pay_status as payStatus
    FROM am_presale where deleted = 0 and open_id = #{openId}
    <if test="orderType != null" >
      and pay_status = #{orderType}
    </if>
    GROUP BY presale_order_number
    ORDER BY create_time DESC
  </select>
  <select id="getPresaleByCode" parameterType="java.lang.String" resultType="map">
    SELECT presale_order_number as orderNumber,total_price as totalOrderPrice,create_time as orderTime,pay_status as payStatus
    FROM am_presale where deleted = 0 and presale_order_number = #{orderNumber}
    GROUP BY presale_order_number
  </select>
  <select id="getVdInfoByCode" parameterType="java.lang.String" resultType="map">
    SELECT ap.vd_id as vdId,av.vd_code as vdCode,avd.vendor_name as vdName,
    CONCAT(reg.province,'-',reg.city,'-',reg.area,'-',reg.region_name,'-',avd.address) as vdPoint
    FROM am_presale as ap
    LEFT JOIN am_vendor_deploy as avd ON ap.vd_id = avd.id
    LEFT JOIN am_vendor as av ON avd.vd_id = av.id
    LEFT JOIN am_region as reg ON avd.region_id = reg.id
    where ap.deleted = 0 and ap.presale_order_number = #{orderNumber}
    GROUP BY ap.vd_id
  </select>
  <select id="getGoodsInfoByCodeAndVdId" resultType="map">
    SELECT ap.pick_up_code as PickUpCode,ag.id as goodsId,ag.name as goodsName,cf.file_path as goodsImage,ap.goods_number as goodsQuantity
    FROM am_presale as ap
    LEFT JOIN am_goods as ag ON ap.goods_id = ag.id
    LEFT JOIN cm_file as cf ON ag.image_id = cf.id
    where ap.deleted = 0 and ap.presale_order_number = #{orderNumber} and ap.vd_id = #{vdId}
  </select>
  <select id="getVdIdsByCode" parameterType="java.lang.String" resultType="java.lang.Integer">
    SELECT vd_id FROM am_presale where deleted = 0 and presale_order_number = #{orderNumber}
    GROUP BY vd_id
  </select>
  <select id="getGoodsInfo" resultType="map">
    SELECT goods_id as goodsId,goods_number as goodsQuantity,pick_up_code as PickUpCode
    FROM am_presale where deleted = 0 and presale_order_number = #{orderNumber} and vd_id = #{vdId}
  </select>
  <select id="checkPayStatus" parameterType="java.lang.String" resultType="java.lang.Integer">
    SELECT pay_status FROM am_presale where deleted = 0 and pay_status = 1 and presale_order_number = #{orderNumber}
  </select>
  <select id="getCodeByPaid" resultType="java.lang.String">
    SELECT presale_order_number FROM am_presale where deleted = 0 and pay_status = 1
    GROUP BY presale_order_number
  </select>
  <select id="getCodeByUnpaid" resultType="java.lang.String">
    SELECT presale_order_number FROM am_presale where deleted = 0 and pay_status = 0
    GROUP BY presale_order_number
  </select>
</mapper>